// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hello.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 首次握手请求
type HelloREQ struct {
	Time                 *int64   `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	Msg                  *string  `protobuf:"bytes,2,req,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloREQ) Reset()         { *m = HelloREQ{} }
func (m *HelloREQ) String() string { return proto.CompactTextString(m) }
func (*HelloREQ) ProtoMessage()    {}
func (*HelloREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7116fbf19896b02, []int{0}
}

func (m *HelloREQ) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloREQ.Unmarshal(m, b)
}
func (m *HelloREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloREQ.Marshal(b, m, deterministic)
}
func (m *HelloREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloREQ.Merge(m, src)
}
func (m *HelloREQ) XXX_Size() int {
	return xxx_messageInfo_HelloREQ.Size(m)
}
func (m *HelloREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloREQ.DiscardUnknown(m)
}

var xxx_messageInfo_HelloREQ proto.InternalMessageInfo

func (m *HelloREQ) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *HelloREQ) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// 握手应答
type HelloACK struct {
	Code                 *int32   `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Msg                  *string  `protobuf:"bytes,2,req,name=msg" json:"msg,omitempty"`
	Pub                  []byte   `protobuf:"bytes,3,req,name=pub" json:"pub,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloACK) Reset()         { *m = HelloACK{} }
func (m *HelloACK) String() string { return proto.CompactTextString(m) }
func (*HelloACK) ProtoMessage()    {}
func (*HelloACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7116fbf19896b02, []int{1}
}

func (m *HelloACK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloACK.Unmarshal(m, b)
}
func (m *HelloACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloACK.Marshal(b, m, deterministic)
}
func (m *HelloACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloACK.Merge(m, src)
}
func (m *HelloACK) XXX_Size() int {
	return xxx_messageInfo_HelloACK.Size(m)
}
func (m *HelloACK) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloACK.DiscardUnknown(m)
}

var xxx_messageInfo_HelloACK proto.InternalMessageInfo

func (m *HelloACK) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *HelloACK) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *HelloACK) GetPub() []byte {
	if m != nil {
		return m.Pub
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloREQ)(nil), "proto.HelloREQ")
	proto.RegisterType((*HelloACK)(nil), "proto.HelloACK")
}

func init() { proto.RegisterFile("proto/hello.proto", fileDescriptor_f7116fbf19896b02) }

var fileDescriptor_f7116fbf19896b02 = []byte{
	// 119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x48, 0xcd, 0xc9, 0xc9, 0xd7, 0x03, 0xb3, 0x85, 0x58, 0xc1, 0x94, 0x92, 0x01,
	0x17, 0x87, 0x07, 0x48, 0x34, 0xc8, 0x35, 0x50, 0x48, 0x88, 0x8b, 0xa5, 0x24, 0x33, 0x37, 0x55,
	0x82, 0x51, 0x81, 0x49, 0x83, 0x39, 0x08, 0xcc, 0x16, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97,
	0x60, 0x52, 0x60, 0xd2, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x9c, 0xa0, 0x3a, 0x1c, 0x9d, 0xbd, 0x41,
	0x3a, 0x92, 0xf3, 0x53, 0x20, 0x3a, 0x58, 0x83, 0xc0, 0x6c, 0x4c, 0x1d, 0x20, 0x91, 0x82, 0xd2,
	0x24, 0x09, 0x66, 0x05, 0x26, 0x0d, 0x9e, 0x20, 0x10, 0x13, 0x10, 0x00, 0x00, 0xff, 0xff, 0x43,
	0xfc, 0x9c, 0x94, 0x90, 0x00, 0x00, 0x00,
}
